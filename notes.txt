Babel can handle JSX transforms and ES6 transforms as well 

Javascript by default is function scoped
This is the biggest difference between var and let
Let allows you to have code which is block scoped
So, anywhere you have a curly brace, you have a scope with let
let will still hoist the variable to the top of the block, but not the top of the function as in var

const is let, but const cane be re-assigned a new refrence.
But it still can be immutable

This will fly
const user = {
  name: 'Tyler',
  age: 25
}
user.name = 'Joey'

this will not fly

const user = {
  name: 'Tyler',
  age: 25
}
user = {
  name: 'Joey', 
  age: 25
}

Always default with const, if youre mutating the variable use let, stay away from var if possible

Import and export
// math.js
export function add (x,y) {
  return x + y
}
export function multiply (x,y) {
  return x * y
}
export function divide (x,y) {
  return x / y
}
// main.js
import { add, multiply } from './math'
add(1,2) // 3
multiply(3,4) // 12

or you can use import * from './math' here to pull all the exports

you can also have modules that only export single values using default

export default function a (a,b,c){
	
}

import a from './math'

you can even mix named exports with default exports

// math.js
export function add (x,y) {
  return x + y
}
export default function doAllTheMath (x,y,z) {
  return x + y + x * x * y * z / x / y / z
}
// main.js
import doAllTheMath, { add } from './math'
doAllTheMath(1,2,3) // 4
add(1,2) // 3

Object Destructuring
When youre passing props around to components, how do you know whats in props without defining proptypes?

function register (props) {
  var { onChangeEmail, email, onChangePassword, password, submit }  = props;
  return (
    <div>
      <span>Email:</span>
      <input type='text' onChange={onChangeEmail} value={email} />
      <span>Password:</span>
      <input type='text' onChange={onChangePassword} value={password} />
      <button onClick={submit}>Submit</button>
    </div>
  )
}

This pulls properties from the props object and casts them to local variables (why not use let here?)

This can be done with imports as well

var ReactRouter = require('react-router');
var Route = ReactRouter.Route;
var Link = ReactRouter.Link;
var Router = ReactRouter.Router;

becomes
var { Route, Link, Router } = require('react-router')


Concise Object Methods allow you to frop tghe : function part of a method

var Register = React.createClass({
  getDefaultProps: function () {
  },
  componentDidMount: function () {
  },
  shouldComponentUpdate: function () {
  },
  render: function () {
  }
})

becomes

var Register = React.createClass({
  getDefaultProps () {
  },
  componentDidMount () {
  },
  shouldComponentUpdate () {
  },
  render () {
  }
})

Arrow Functions

Used for more concise syntax and sharing lexical "this" with the parent scope
If you have everything on one line, the arrow function will implicitly return whatever is on that line

var FriendsList = React.createClass({
  getInitialState () {
    return {
      friends: [
        {id: 0, name: 'Mikenzi'},
        {id: 1, name: 'Ryan'},
        {id: 2, name: 'Jake'},
      ]
    }
  },
  onAddFriend (friend) {
    this.setState({
      friends: this.state.friends.concat([friend])
    })
  }
  render () {
    return (
      <ul>
        {this.state.friends.map(function (friend) {
        	//Dont know what this is in the scope here, could use .bind or an arrow function
          return <FriendItem key={friend.id} handleAddFriend={this.onAddFriend}>{friend.name}</FriendItem>
        })} />
    )
  }
});

 render () {
    return (
      <ul>
        {this.state.friends.map((friend) => <FriendItem key={friend.id} handleAddFriend={this.onAddFriend}>{friend.name}</FriendItem>)}
      </ul>
    )
  }


Template Strings fix the annoyance of string concatenation

function makeGreeting (name, email, id) {
  return `Hello, ${name}. We've emailed you at ${email}. Your user id is ${id}.`
}

the whole line is wrapped in backticks not quotes, just a heads up there

Default Parameters
If a param isnt specified, you can do it in the method declaration
function debounce (func, wait = 1000, immediate) {//}


Concise Objects
When writing an object const foo = {bar:"foobar"}
you can get away with naming the field the same as the parameter

function getUser (username) {
  const email = getEmail(username)
  return {
    username,
    email
  }
}

Async/Await

Every async function you write will return a promise, and everything you await will ordinaraily be a promise

Assuming getUsers() returns a promise

function getFirstUser() {
    return getUsers().then(function(users) {
        return users[0].name;
    }).catch(function(err) {
        return {
          name: 'default user'
        };
    });
}

We can now use await in ES6 to do the same thing
And handle errors in the try/catch block

async function getFirstUser() {
    try {
        let users = await getUsers();
        return users[0].name;
    } catch (err) {
        return {
            name: 'default user'
        };
    }
}

This will force syncronous behavior so foo will return and bar will then return
let foo = await getFoo();
let bar = await getBar();

to get them to fire at the same time 
let [foo, bar] = await Promise.all([getFoo(), getBar()]);
This wrapper promise will resolve only when all child promises return

Another example working with promises

function getUser () {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve({name: 'Tyler'}), 2000)
  })
}

function handleGetUser () {  
  getUser()
    .then((user) => {
      console.log('The user is: ', user)
    })
    .catch((error) => {
      console.warn('Oh no there was an error: ', error)
    })
}

But try this instead

async function handleGetUser () {
  try {
    var user = await getUser()
    console.log(user)
  } catch (error) {
    console.log('Error in handleGetUser', error)
  }
}

You can write react classes as ES6 classes
I dont really like the syntax thought

1- youre no longer using create class, instead you create a class that extends React.Component
2- Classes have constructor functions which initalize the object being returned from the class. This also means you much call super()
3 - There arent commas between properties because its a class not an object
4- proptypes are moved out of the class, and stateless functional components are as well

When you use createCalss the this keyword is autobound, es6 classed must have this bound or use the arrow function.


